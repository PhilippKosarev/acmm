#!/usr/bin/env python3

# Imports
import sys, os, time
from multiprocessing import Process, SimpleQueue
from libjam import captain, drawer, typewriter, notebook, flashcard

# Internal imports
from mod_fetcher import ModFetcher
mod_fetcher = ModFetcher()
from mod_installer import ModInstaller
mod_installer = ModInstaller()
from data import data

# Handling config
HOME = drawer.get_home()
TEMP = drawer.get_temp() + '/acmm'
script_folder = os.path.dirname(os.path.realpath(__file__))
CONFIG_TEMPLATE_FILE = f"{script_folder}/config.toml.in"
CONFIG_DIR = f"{HOME}/.config/acmm"
CONFIG_FILE = f"{CONFIG_DIR}/config.toml"
notebook.check_config(CONFIG_TEMPLATE_FILE, CONFIG_FILE)
config = notebook.read_toml(CONFIG_FILE)

# Checking AC_DIR
## Likely AC_DIR locations
assettocorsa = data.get('ac_path_suffix')
likely_ac_dirs = data.get('likely_ac_dirs')
## Getting AC_DIR
AC_DIR = config.get('paths').get("AC_DIR")
if AC_DIR == None:
  for directory in likely_ac_dirs:
    if drawer.is_folder(directory):
      AC_DIR = directory
# Checking AC_DIR
if AC_DIR == None:
  print(f"""Assetto Corsa folder not found.
If Assetto Corsa is not installed in the default location, you might need to specify the path to '{assettocorsa}' in '{CONFIG_FILE}'.""")
  sys.exit(-1)
elif not drawer.is_folder(AC_DIR):
  print(f"""Path to Assetto Corsa's folder specified in '{CONFIG_FILE}' does not exist.""")
  sys.exit(-1)
elif not AC_DIR.endswith(assettocorsa):
  print(f"""Path to Assetto Corsa in '{CONFIG_FILE}' is incorrect. It should end with '{assettocorsa}'.
Currently specified AC directory:\n{AC_DIR}""")
  sys.exit(-1)

mod_categories = [
  {
    'title': 'Cars', 'key': 'cars',
    'get_function': mod_fetcher.fetch_cars,
  },
  {
    'title': 'Tracks', 'key': 'tracks',
    'get_function': mod_fetcher.fetch_tracks
  },
  {
    'title': 'PP Filters', 'key': 'ppfilters',
    'get_function': mod_fetcher.fetch_ppfilters
  },
  {
    'title': 'Weather', 'key': 'weather',
    'get_function': mod_fetcher.fetch_weather
  },
  {
    'title': 'Apps', 'key': 'apps',
    'get_function': mod_fetcher.fetch_apps
  },
]

include_info = ['size']

def get_category_mods(mod_category: str, category_info: dict, queue):
  get_function = category_info.get('get_function')
  assets = get_function(AC_DIR, include_info)
  opt_kunos = options.get('kunos').get('enabled')
  opt_all = options.get('all').get('enabled')
  if opt_kunos is False and opt_all is False:
    mods = assets.get('mod')
  elif opt_kunos is True and opt_all is False:
    mods = assets.get('kunos') + assets.get('dlc')
  else:
    mods = assets.get('kunos') + assets.get('dlc') + assets.get('mod')
  size = 0
  for mod in mods:
    size += mod.get('size')
  return_tuple = (mod_category, mods, size)
  queue.put(return_tuple)

def get_mods() -> dict:
  start_time = time.time()
  typewriter.print_status('Fetching installed mods...')
  result_dict = {}
  processes = []
  queue = SimpleQueue()
  for mod_category in mod_categories:
    key = mod_category.get('key')
    if not options.get(key).get('enabled'):
      continue
    result_dict[key] = mod_category
    process = Process(target=get_category_mods, args=(key, mod_category, queue))
    process.start()
    processes.append(process)
  for process in processes:
    key, mods, size = queue.get()
    result_dict[key]['mods'] = mods
    result_dict[key]['size'] = size
  for process in processes:
    process.join()
  queue.close()
  end_time = time.time()
  elapsed = end_time - start_time
  typewriter.print(f"Fetched installed mods in {round(elapsed, 2)}s.")
  return result_dict

# The command line interface for acmm.
class CLI:

  # List installed mods.
  def list(self):
    mod_categories = get_mods()
    self.print_mod_categories(mod_categories)


  # Interface to install mods.
  def install(self, path: str):
    # Unpacking
    typewriter.print_status("Processing...")
    if drawer.get_filetype(path) != 'folder':
      if not drawer.is_archive_supported(path):
        print('Unsupported archive type.')
        return
      if drawer.exists(TEMP):
        drawer.delete_folder(TEMP)
      drawer.make_folder(TEMP)
      filename = drawer.get_basename(path)
      def print_extract_progress(done: int, todo: int):
        typewriter.print_progress(f"Extracting '{filename}'", done, todo)
      unpacked = drawer.extract_archive(path, TEMP, progress_function=print_extract_progress)
    else:
      unpacked = path
    # Searching for mods
    typewriter.print_status('Searching for mods...')
    installable_mods = mod_installer.find_installable_mods(unpacked, include_info)
    if len(installable_mods) == 0:
      typewriter.print('No mods found.')
      return
    size = 0
    for mod in installable_mods:
      size += mod.get('size')
    self.print_mod_category('Found mods', installable_mods, size)
    try:
      if not flashcard.yn_prompt("Install listed mods?"):
        return typewriter.print("Installation cancelled.")
    except KeyboardInterrupt:
        return typewriter.print("Installation cancelled.")
    # Installing mods
    def print_install_progress(current_mod: dict, done: int, todo: int):
      current_mod = current_mod.get('mod_id')
      typewriter.print_progress(f"Installing '{current_mod}'", done, todo)
    installed_mods = mod_installer.install_mods(installable_mods, AC_DIR, print_install_progress)
    typewriter.print(f"Installed {len(installed_mods)} mods.")

  # Interface to remove mods
  def remove(self, search_term: str):
    mod_categories = get_mods()
    # Removing non matching mods
    for category in mod_categories:
      non_matching = []
      mods = mod_categories.get(category).get('mods')
      for mod_id in mods:
        if not search_term in mod_id:
          non_matching.append(mod_id)
      for mod_id in non_matching:
        mods.pop(mod_id)
    # Removing empty categories
    empty_categories = []
    for category in mod_categories:
      mods = mod_categories.get(category).get('mods')
      if len(mods) == 0:
        empty_categories.append(category)
    for category in empty_categories:
      mod_categories.pop(category)
    # Checking if any match
    if len(mod_categories) == 0:
      print(f"No mods found matching '{search_term}'.")
      return
    self.print_mod_categories(mod_categories)
    if flashcard.yn_prompt('Remove the listed mods?') is False:
      print('Deletion aborted.')
      return
    marked_mods = {}
    for category in mod_categories:
      category_info = mod_categories.get(category)
      mods = category_info.get('mods')
      for mod_id in mods:
        mod_info = mods.get(mod_id)
        marked_mods[mod_id] = mod_info
    num_of_mods = len(marked_mods)
    if num_of_mods > 1:
      delay = 1 / num_of_mods
    else:
      delay = 0.3
    last_deleted = None
    for mod_id in marked_mods:
      mod_info = marked_mods.get(mod_id)
      try:
        typewriter.print_status(f"Deleting '{mod_id}'...")
        mod_path = mod_info.get('path')
        time.sleep(delay)
        drawer.trash_path(mod_path)
        last_deleted = mod_id
      except KeyboardInterrupt:
        typewriter.print('Deletion aborted.')
        typewriter.print(f"Last deleted: '{last_deleted}'.")
        exit()
    typewriter.print(f"Deleted {num_of_mods} mods.")

  # Helper functions
  def print_mod_categories(self, mod_categories: dict):
    for category in mod_categories:
      category_info = mod_categories.get(category)
      title = category_info.get('title')
      mods = category_info.get('mods')
      size = category_info.get('size')
      self.print_mod_category(title, mods, size)

  def print_mod_category(self, title: str, mods: list, filesize: int):
    if filesize is not None:
      filesize = drawer.get_readable_filesize(filesize)
      units = filesize[1].upper()
      filesize = round(filesize[0], 1)
      filesize_string = f"{filesize} {units}"
    else:
      filesize_string = "Unknown"
    entries = len(mods)
    # Quitting if there's nothing to print
    if entries == 0:
      return
    # Printing
    typewriter.print(f"{typewriter.bolden(title)}: ( {entries} | {filesize_string} )")
    mod_ids = []
    for mod in mods:
      mod_ids.append(mod.get('mod_id'))
    mods_columns = typewriter.list_to_columns(mod_ids, None, 2)
    typewriter.print(f"{mods_columns}\n")

# Inputs/Commands/Options configuration
app = "acmm"
description = "A mod manager for Assetto Corsa"
# help = "" # If you wish to set your own help page text
commands = {
  'list':     {'function': CLI.list,
  'description': 'Lists installed mods'},

  'install':  {'function': CLI.install,
  'description': 'Installs the specified mod'},

  'remove':   {'function': CLI.remove,
  'description': 'Removes specified mods'},
}
options = {
  'cars':      {'long': ['car', 'cars'],           'short': ['c'],
  'description': 'Only list/remove cars'},

  'tracks':    {'long': ['track', 'tracks'],       'short': ['t'],
  'description': 'Only list/remove tracks'},

  'ppfilters': {'long': ['ppfilter', 'ppfilters'], 'short': ['f'],
  'description': 'Only list/remove PP filters'},

  'weather':   {'long': ['weather'],               'short': ['w'],
  'description': 'Only list/remove weather'},

  'apps':      {'long': ['app', 'apps'],           'short': ['a'],
  'description': 'Only list/remove apps'},

  'all':       {'long': ['all'],                   'short': ['A'],
  'description': 'Do not filter out Kunos assets'},

  'kunos':     {'long': ['kunos'],                 'short': ['k'],
  'description': 'Filter out non Kunos assets'},
}
help = captain.generate_help(app, description, commands, options)

# Parsing user input
interpretation = captain.interpret(app, help, commands, options)
function = interpretation.get('function')
options = interpretation.get('options')

# Enabling all filters if none are active
filter_options = ['cars', 'tracks', 'ppfilters', 'weather', 'apps']
disabled_filters = 0
for filter_option in filter_options:
  if options.get(filter_option).get('enabled') is False:
    disabled_filters += 1
if disabled_filters == len(filter_options):
  for filter_option in filter_options:
    options[filter_option]['enabled'] = True

# Executing function
exec(f"CLI().{function}")
