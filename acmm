#! /usr/bin/python

# Imports
import sys

# Jam imports
from libjam import Captain, Drawer, Typewriter, Clipboard, Notebook, Flashcard

# Jam classes
captain = Captain()
drawer = Drawer()
typewriter = Typewriter()
clipboard = Clipboard()
notebook = Notebook()
flashcard = Flashcard()

# Internal imports
from mod_manager import ModManager
from data import Data

data = Data()

# Handling config
HOME = drawer.get_home()
CONFIG_DIR = f"{HOME}/.config/acmm"
CONFIG_FILE = f"{CONFIG_DIR}/config.toml"
notebook.check_config(CONFIG_FILE)
config = notebook.read_toml(CONFIG_FILE)

# Checking AC_DIR
## Likely AC_DIR locations
assettocorsa = data.get('ac_path_suffix')
likely_ac_dirs = data.get('likely_ac_dirs')
## Getting AC_DIR
AC_DIR = config.get('paths').get("AC_DIR")
if AC_DIR == None:
  for directory in likely_ac_dirs:
    if drawer.is_folder(directory):
      AC_DIR = directory
# Checking AC_DIR
if AC_DIR == None:
  print(f"Assetto Corsa folder not found.\n\
If Assetto Corsa is not installed in the default location, you might need to specify the path to '{assettocorsa}' in '{CONFIG_FILE}'.")
  sys.exit(-1)
elif drawer.is_folder(AC_DIR) is False:
  print(f"Path to Assetto Corsa's folder specified in '{CONFIG_FILE}' does not exist.")
  sys.exit(-1)
elif AC_DIR.endswith(assettocorsa) is False:
  print(f'''Path to Assetto Corsa in '{CONFIG_FILE}' is incorrect. It should end with '{assettocorsa}'.)
Currently specified AC directory:\n{AC_DIR}''')
  sys.exit(-1)
config['paths']['AC_DIR'] = AC_DIR

# The command line interface functions
class CLI:
  # Interface to list installed mods
  def list(self):
    mods = mod_manager.get_mods()
    self.print_mod_categories(mods)

  # Interface to install mods
  def install(self, path: str, *args):
    # Getting arbitrary number of paths
    paths = list(args)
    paths.insert(0, path)
    for path in paths:
      # Checking file
      if drawer.exists(path) is False:
        print(f"File '{path}' does not exist.")
        sys.exit(-1)

    for path in paths:
      # Pre processing (extracting archive, copying files)
      typewriter.print_status("Computing file size...")
      size = round((drawer.get_file_size(path) / 1_000_000_000), 1)
      if size > 10:
        print(f"Specified mod(s) weigh {size}GB, installing it might take a while. ")
        if flashcard.yn_prompt("Proceed anyway?") is False:
          sys.exit(0)

    typewriter.print_status("Cleaning temp dir...")
    mod_manager.clean_temp_dir()
    for path in paths:
      typewriter.print_status("Processing...")
      basename = drawer.basename(path)
      def print_extract_progress(done: int, todo: int):
        typewriter.print_progress(f"Extracting '{basename}'", done, todo)
      unpacked = mod_manager.extract_mod(path, progress_function=print_extract_progress)
      if unpacked is None:
        typewriter.print(f"Cannot process contents of '{path}'.")
        sys.exit(-1)

    # Searching for mods
    typewriter.print_status("Searching for mods...")
    mods = mod_manager.find_mods()
    meta_mods = mod_manager.find_meta_mods()
    # Joining metamods
    if meta_mods != {}:
      mods = mods | meta_mods
    if mods == {}:
      typewriter.print("No mods found.")
      sys.exit(-1)
    # Printing found mods
    typewriter.print(typewriter.bolden("Mods found:"))
    self.print_mod_categories(mods)
    # Getting user input
    if flashcard.yn_prompt("Install listed mods?") is False:
      print("Installation cancelled.")
      sys.exit(0)
    # Installing mods
    def print_install_progress(copied: int, to_copy: int):
      typewriter.print_progress("Installing", copied, to_copy)
    mod_manager.install_mods(mods, progress_function=print_install_progress)
    typewriter.print("Installation complete.")

  # Interface to remove mods
  def remove(self, search_term: str):
    mods = mod_manager.search_mods(search_term)
    if mods == {}:
      print(f"No mods found matching '{search_term}'.")
      sys.exit(0)
    self.print_mod_categories(mods)
    if flashcard.yn_prompt('Remove the listed mods?'):
      mod_manager.remove_mods(mods)
      print('Deleted.')
    else:
      print('Deletion cancelled.')

  # Helper functions
  def print_mod_categories(self, mods):
    for category in mods:
      title = mods.get(category).get('title')
      mod_list = mods.get(category).get('mod_list')
      self.print_mod_category(title, mod_list)

  def print_mod_category(self, title: str, mod_list: list):
    size = 0
    for mod in mod_list:
      size += drawer.get_file_size(mod)
    size = round((size / 1_000_000_000), 1)
    mod_list = drawer.basename(mod_list)
    mod_list = clipboard.replace(mod_list, ".ini", "")
    entries = len(mod_list)
    # Quitting if there's nothing to print
    if entries == 0:
      return
    # Printing
    print(f"{typewriter.bolden(title)}: ( {entries} | {size}GB )")
    mods_columns = typewriter.list_to_columns(mod_list, None, 2)
    print(f"{mods_columns}")

cli = CLI()

# Inputs/Commands/Options configuration
app = "acmm"
description = "Assetto Corsa Mod Manager manages mods for Assetto Corsa"
# help = "" # If you wish to set your own help page text
commands = {
  'list':     {'function': cli.list,
  'description': 'Lists installed mods'},

  'install':  {'function': cli.install,
  'description': 'Installs the specified mod'},

  'remove':   {'function': cli.remove,
  'description': 'Removes specified mods'},
}
options = {
  'car':      {'long': ['car', 'cars'],           'short': ['c'],
  'description': 'Only list|install|remove cars'},

  'track':    {'long': ['track', 'tracks'],       'short': ['t'],
  'description': 'Only list|install|remove tracks'},

  'ppfilter': {'long': ['ppfilter', 'ppfilters'], 'short': ['f'],
  'description': 'Only list|install|remove PP filters'},

  'weather': {'long': ['weather'],                'short': ['w'],
  'description': 'Only list|install|remove weather'},

  'python':  {'long': ['py', 'python'],           'short': ['p'],
  'description': 'Only list|install|remove python apps'},

  'lua':  {'long': ['lua'],                       'short': ['l'],
  'description': 'Only list|install|remove lua apps'},

  'all':      {'long': ['all'],                   'short': ['a'],
  'description': 'Do not filter out Kunos assets'},

  'kunos':    {'long': ['kunos'],                 'short': ['k'],
  'description': 'Filter out non Kunos assets'},
}
filter_options = ['car', 'track', 'ppfilter', 'weather', 'python', 'lua']


# Parsing user input
arguments = sys.argv
arguments.remove(arguments[0])
help = captain.generate_help(app, description, commands, options)
interpretation = captain.interpret(app, help, commands, arguments, options)
function = interpretation.get('function')
options = interpretation.get('options')

# Enabling all filters if none are active
disabled_filters = 0
for filter_option in filter_options:
  if options.get(filter_option).get('enabled') is False:
    disabled_filters += 1
if disabled_filters == len(filter_options):
  for filter_option in filter_options:
    options[filter_option]['enabled'] = True

# Passing options to mod_manager
mod_manager = ModManager(config, options)

# Executing function
exec(f"cli.{function}")
